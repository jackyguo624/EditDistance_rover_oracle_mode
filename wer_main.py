#!/usr/bin/python

"""rover_wer.py:
calculate the wer from ctm and transcription.
the ctm generated by rover oracle mode is also supported.
"""

__author__ = "Jiaqi Guo"

import argparse
from editdis import EditDis
import editdistance
import os

def get_args():
    parser = argparse.ArgumentParser('''Rover_wer ''')
    parser.add_argument('ctm', type=str, help="ctm file")
    parser.add_argument('trans', type=str, help="transcription file")
    parser.add_argument('out', type=str, help="out directory")
    parser.add_argument('--oracle-mode', action='store_true')
    return parser.parse_args()


def get_ref(trans):
    ref_dict = {}
    with open(trans, 'r') as transf:
        for line in transf:
            sid, tra = line.split(' ', 1)
            tra = tra.replace('\n','') #
            tra_list = tra.split(' ')  #
            ref_dict[sid] = tra_list #tra.replace('\n', '')
    return ref_dict


res = []

def process_hyp(hyp):
    global res
    res = []
    proccess_hyp_sub(hyp, 0, "")
    return res


def proccess_hyp_sub(hyp, i, cur_str):
    global res
    if i == len(hyp):
        res.append(cur_str)
        return
    for x in hyp[i]:
        proccess_hyp_sub(hyp, i+1, cur_str+ (x if x != '@' else ''))

def get_hyp_iter(ctm):
    alt_on = False
    alt = []
    hyps_dict = {}
    with open(ctm, 'r') as ctmf:
        for line in ctmf:
            line=line.replace("\t"," ")
            if '* * <ALT_BEGIN>' in line and not alt_on:
                alt = []; alt_on = True
                continue
            elif '* * <ALT>' in line and alt_on:
                continue
            elif '* * <ALT_END>' in line and alt_on:
                alt_on = False
                sid = line.split(' ', 1)[0]
                if sid not in hyps_dict: hyps_dict[sid] = []
                hyps_dict[sid].append(alt)
                continue
            elif alt_on:
                sid, word = line.split(' ')[0], line.split(' ')[4]
                alt.append(word)
            elif not alt_on:
                sid, word = line.split(' ')[0], line.split(' ')[4]
                if sid not in hyps_dict: hyps_dict[sid] = []
                hyps_dict[sid].append([word])
            else:
                errmsg = line+'\n'+'Format Error'
                raise RuntimeError(errmsg)
    for key, hyp in hyps_dict.items():
        yield key, hyp


def oracle_mode(args):
    ctm, trans, out = args.ctm, args.trans,args.out
    refs = get_ref(trans)
    hyps = get_hyp_iter(ctm)
    outf = open(os.path.join(out,"detail"), 'w')

    _ins=0
    _delt=0
    _sub=0
    _len_ref=0

    _sent_c_n=0
    _sent_n=0
    for key, hyp in hyps:
        ref = refs[key]
        # print(key, ref, hyp, flush=True)
        min_wer, (best_hyp, (ins, delt, sub), op ), len_ref = EditDis.m_minDistance(ref, hyp)
        outf.write("{} {}\n{} {}\n{} {} {}\n{} {}\n".format(key, " ".join(ref), key, " ".join([ str(h) for h in hyp]), key, op, min_wer ,key, " ".join(best_hyp)))
        _ins+=ins
        _delt+=delt
        _sub+=sub
        _len_ref+=len_ref
        if min_wer > 1e-7:
            _sent_c_n+=1
        _sent_n+=1
    outf.close()

    with open(os.path.join(out,"wer"),"w") as outf:
        outf.write("wer:{:.4f} [{:d} / {:d} : {:d} ins {:d} del {:d} sub] \n".format((_ins+_delt+_sub)/_len_ref, (_ins+_delt+_sub),_len_ref ,_ins,_delt,_sub))
        outf.write("ser:{:.4f} [{:d} / {:d}] ".format(_sent_c_n/_sent_n, _sent_c_n, _sent_n))
    outf.close()

def other_mode(args):
    ctm, trans, out = args.ctm, args.trans, args.out
    hyps = get_hyp_iter(ctm)
    outf = open(os.path.join(out, "hyp.txt"), 'w')
    for key, hyp in hyps:
        outf.write("{} {}\n".format(key, " ".join([h[0] for h in hyp])))
    outf.close()
    os.system("awk -f filter.awk {} > {}".format(os.path.join(out, "hyp.txt"), os.path.join(out,"hyp.char")))
    os.system("compute-wer --text --mode=present ark:{} ark:{} > {}".format(
        trans,
        os.path.join(out, "hyp.char"),
        os.path.join(out, "wer") ))


def main():
    args = get_args()
    if args.oracle_mode:
        oracle_mode(args)
    else:
        other_mode(args)

if __name__ == '__main__':
    main()

